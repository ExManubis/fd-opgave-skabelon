---
import projectionsData from '@data/financialProjections.json';
import DynamicIcon from '@components/helpers/DynamicIcon.astro';
---

<section
    class="bg-neutral-100 transition-all duration-300 flex flex-col py-20 px-4 lg:px-20 gap-10"
>
    <div class="flex flex-row">
        <div class="flex flex-col justify-center">
            <h1 class="text-neutral-900 text-4xl font-cabin max-w-2xl px-4">
                {projectionsData.title}
            </h1>
            <p class="text-neutral-700 max-w-2xl mt-4 px-4 font-lato text-md">
                {projectionsData.subtitle}
            </p>
        </div>
        <div class="flex flex-row h-10 place-self-center mx-auto">
            <button
                id="projection-button-back"
                class="bg-neutral-900
            rounded-full
            flex
            items-center
            justify-center
            p-2
            mr-4"
            >
                <svg
                    width="25"
                    height="21"
                    viewBox="0 0 25 21"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    <path
                        d="M22.6947 10.3839L1.82227 10.3839M1.82227 10.3839L10.3609 18.9222M1.82227 10.3839L10.3609 1.84473"
                        stroke="#FFF"
                        stroke-width="3.19444"
                        stroke-linecap="round"
                        stroke-linejoin="round"></path>
                </svg>
            </button>
            <button
                id="projection-button-forward"
                class="bg-amber-300 rounded-full flex items-center justify-center p-2"
            >
                <svg
                    width="25"
                    height="22"
                    viewBox="0 0 25 22"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    <path
                        d="M1.68262 10.8491H22.8341M22.8341 10.8491L14.1812 2.19629M22.8341 10.8491L14.1812 19.5021"
                        stroke="currentcolor"
                        stroke-width="3.23715"
                        stroke-linecap="round"
                        stroke-linejoin="round"></path>
                </svg>
            </button>
        </div>
    </div>
    <div class="flex flex-row gap-10">
        {
            projectionsData.values.map((projection) => (
                <div class="projectionCard group bg-neutral-200 transition-all duration-300 flex flex-col justify-center p-4 rounded-xl h-fit w-fit">
                    <DynamicIcon
                        name={projection.icon}
                        class="w-10 h-10 text-neutral-900 group-[.active]:text-amber-300"
                    />
                    <h1 class="text-neutral-900 group-[.active]:text-neutral-50 text-lg font-cabin">
                        {projection.title}
                    </h1>
                    <p class="text-neutral-700 group-[.active]:text-neutral-50 text-sm font-lato">
                        {projection.description}
                    </p>
                </div>
            ))
        }
    </div>
</section>

<style>
    .projectionCard.active {
        background-color: rgb(23 23 23); /* bg-neutral-900 */
    }
</style>

<script>
    const projectionButtonBack = document.getElementById(
        'projection-button-back',
    );
    const projectionButtonForward = document.getElementById(
        'projection-button-forward',
    );
    let currentIndex = 0;
    document.addEventListener('DOMContentLoaded', () => {
        const projectionCards = document.querySelectorAll('.projectionCard');
        projectionCards[currentIndex].classList.add('active');
        projectionCards.forEach((card) => {
            card.addEventListener('click', () => {
                projectionCards.forEach((card) => {
                    card.classList.remove('active');
                });
                card.classList.add('active');
                currentIndex = Array.from(projectionCards).indexOf(card);
                console.log(currentIndex);
            });
        });
        projectionButtonBack.addEventListener('click', () => {
            if (currentIndex > 0) {
                currentIndex--;
                projectionCards.forEach((card) => {
                    card.classList.remove('active');
                });
                projectionCards[currentIndex]?.classList.add('active');
            }
        });
        projectionButtonForward.addEventListener('click', () => {
            if (currentIndex < projectionCards.length - 1) {
                currentIndex++;
                projectionCards.forEach((card) => {
                    card.classList.remove('active');
                });
                projectionCards[currentIndex]?.classList.add('active');
            }
        });
    });
</script>
